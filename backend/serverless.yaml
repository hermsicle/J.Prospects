# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: gs2kf
service: jprospects-backend

provider:
  name: aws
  runtime: nodejs18.x
  region: us-west-2
  stage: ${opt:stage, 'dev'} # uses --stage param, defaults to 'dev'
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
        - dynamodb:UpdateItem
      Resource:
        - arn:aws:dynamodb:us-west-2:*:table/j.prospects
    - Effect: Allow
      Action:
        - bedrock:InvokeModel
      Resource: '*'

  apiGateway:
    restApiId: # optional
    restApiRootResourceId: # optional
    authorizers:
      cognitoAuthorizer:
        type: COGNITO_USER_POOLS
        authorizerId:
          Ref: ApiGatewayAuthorizer

functions:
  callClaude:
    handler: handlers/bedrock-handler.callClaude
    events:
      - http:
          path: bedrock
          method: post

  # Companies APIs
  listCompanies:
    handler: handlers/dynamodb-handler.listCompanies
    events:
      - http:
          path: companies
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCompany:
    handler: handlers/dynamodb-handler.createCompany
    events:
      - http:
          path: companies
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCompany:
    handler: handlers/dynamodb-handler.getCompany
    events:
      - http:
          path: companies/{companyId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateCompany:
    handler: handlers/dynamodb-handler.updateCompany
    events:
      - http:
          path: companies/{companyId}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteCompany:
    handler: handlers/dynamodb-handler.deleteCompany
    events:
      - http:
          path: companies/{companyId}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCompanyKpis:
    handler: handlers/dynamodb-handler.getCompanyKpis
    events:
      - http:
          path: companies/{companyId}/kpis
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  # Prospects APIs
  listCompanyProspects:
    handler: handlers/dynamodb-handler.listCompanyProspects
    events:
      - http:
          path: companies/{companyId}/prospects
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  createCompanyProspect:
    handler: handlers/dynamodb-handler.createCompanyProspect
    events:
      - http:
          path: companies/{companyId}/prospects
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  getCompanyProspect:
    handler: handlers/dynamodb-handler.getCompanyProspect
    events:
      - http:
          path: companies/{companyId}/prospects/{prospectId}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  updateCompanyProspect:
    handler: handlers/dynamodb-handler.updateCompanyProspect
    events:
      - http:
          path: companies/{companyId}/prospects/{prospectId}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

  deleteCompanyProspect:
    handler: handlers/dynamodb-handler.deleteCompanyProspect
    events:
      - http:
          path: companies/{companyId}/prospects/{prospectId}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId:
              Ref: ApiGatewayAuthorizer

resources:
  Resources:
    MyDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MyTable
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: CognitoAuthorizer
        Type: COGNITO_USER_POOLS
        RestApiId:
          Ref: ApiGatewayRestApi
        IdentitySource: method.request.header.Authorization
        ProviderARNs:
          - arn:aws:cognito-idp:${env:AWS_REGION}:${env:AWS_ACCOUNT_ID}:userpool/${env:COGNITO_USER_POOL_ID}

# custom:
# authorizer:
# dev:
#   name: yourAuthLambdaName
#   type: request
#   resultTtlInSeconds: 0
#   identitySource: method.request.header.Authorization
# prod:
#   name: yourAuthLambdaName
#   type: request
#   resultTtlInSeconds: 0
#   identitySource: method.request.header.Authorization
# local: null

plugins:
  - serverless-offline
